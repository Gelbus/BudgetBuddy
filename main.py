import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types.callback_query import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from bot_config import TOKEN, INCOME_CATEGORIES, EXPENSE_CATEGORIES

import psycopg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class FinanceStates(StatesGroup):
    waiting_for_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    waiting_for_category_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    waiting_for_income_category = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
    waiting_for_expense_category = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /START ====================
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()  # –°–±—Ä–æ—Å –ª—é–±–æ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥ üí∞"))
    builder.add(types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ üìâ"))
    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    keyboard = builder.as_markup(resize_keyboard=True)

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –û–ü–ï–†–ê–¶–ò–ò (–î–û–•–û–î/–†–ê–°–•–û–î) ====================
@dp.message(F.text.in_(["–í–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥ üí∞", "–í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ üìâ"]))
async def process_operation_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥' –∏–ª–∏ '–í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥'."""
    operation_type = "income" if message.text == "–í–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥ üí∞" else "expense"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(operation_type=operation_type)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(FinanceStates.waiting_for_amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–í–ï–î–ï–ù–ù–û–ô –°–£–ú–ú–´ ====================
@dp.message(FinanceStates.waiting_for_amount, F.text.regexp(r'^\d+$'))
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    amount = int(message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    data = await state.get_data()
    operation_type = data.get('operation_type')

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    if operation_type == "income":
        await show_income_categories(message, state)
    else:
        await show_expense_categories(message, state)


@dp.message(FinanceStates.waiting_for_amount)
async def process_amount_invalid(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")


# ==================== –ü–û–ö–ê–ó –ö–ê–¢–ï–ì–û–†–ò–ô –î–û–•–û–î–ê ====================
async def show_income_categories(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤."""
    await state.set_state(FinanceStates.waiting_for_income_category)
    builder = InlineKeyboardBuilder()

    for category in INCOME_CATEGORIES:
        builder.button(text=category, callback_data=f"income_{category}")

    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = builder.as_markup()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)


# ==================== –ü–û–ö–ê–ó –ö–ê–¢–ï–ì–û–†–ò–ô –†–ê–°–•–û–î–ê ====================
async def show_expense_categories(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    await state.set_state(FinanceStates.waiting_for_expense_category)
    builder = InlineKeyboardBuilder()

    for category in EXPENSE_CATEGORIES:
        builder.button(text=category, callback_data=f"expense_{category}")

    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = builder.as_markup()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=keyboard)


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò –î–û–•–û–î–ê ====================
@dp.callback_query(FinanceStates.waiting_for_income_category, F.data.startswith("income_"))
async def process_income_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞."""
    category = callback.data.replace("income_", "")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get('amount')
    operation_type = data.get('operation_type')

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: save_to_db(callback.from_user.id, operation_type, amount, category)

    await callback.message.edit_text(
        f"‚úÖ –î–æ—Ö–æ–¥ {amount} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∑–∞–ø–∏—Å–∞–Ω.\n\n"
        f"*–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î*"
    )
    await callback.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é again
    await show_main_menu(callback.message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–°–•–û–î–ê ====================
@dp.callback_query(FinanceStates.waiting_for_expense_category, F.data.startswith("expense_"))
async def process_expense_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."""
    category = callback.data.replace("expense_", "")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get('amount')
    operation_type = data.get('operation_type')

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: save_to_db(callback.from_user.id, operation_type, amount, category)

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∑–∞–ø–∏—Å–∞–Ω.\n\n"
        f"*–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î*"
    )
    await callback.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é again
    await show_main_menu(callback.message, state)


# ==================== –ü–û–ö–ê–ó –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ====================
async def show_main_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    await state.clear()
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥ üí∞"))
    builder.add(types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ üìâ"))
    builder.adjust(2)
    keyboard = builder.as_markup(resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())